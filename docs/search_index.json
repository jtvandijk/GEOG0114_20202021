[
["index.html", "GEOG0114: Principles of Spatial Analysis Welcome Get in touch Noticed a mistake in this resource?", " GEOG0114: Principles of Spatial Analysis Justin van Dijk1 and Joanna Wilkin2 2020-10-25 Welcome Welcome to Principles of Spatial Analysis, one of the four core modules for the MSc in Geographic and Social Data Science here at UCL Geography. This module provides an introduction into the theory, methods and tools of spatial analysis essential for your career as a Data Scientist. This module has been designed in conjunction with your module on Geographic Information Systems (GIS) and Science (GIScience) from CASA to provide you with an extensive introduction into GIScience, spatial analysis and their associated tools. It has a specific focus on the principles, properties and parameters that are part of spatial analysis and how to understand and apply these effectively within geographic and data science-oriented research. The first half of the module provides detailed introductions into spatial concepts such as scale and geography, spatial dependency and autocorrelation, and spatial heterogeneity and spatial regression models. The second half then focuses on the applications of spatial analysis within current data science research, including cluster analysis and Bayesian modelling. Get in touch Dr Jo Wilkin will be taking Week 1-4, 9, and 10 of the module. You can contact her at j.wilkin [at] ucl.ac.uk or, for online office hours, you can book a half hour slot with Jo using MS Bookings. Dr Justin van Dijk will be taking Week 5-8 of the module. You can contact him at j.t.vandijk [at] ucl.ac.uk or, for online office hours, you can book a half hour slot with Justin using MS Bookings. The module is further supported by two Postgraduate Teaching Assistants: Alfie Long and Jakub Wyszomierski. Noticed a mistake in this resource? Please let us know through the GitHub issues tab, send us a message over MS Teams, or contact us by e-mail. Department of Geography, https://www.mappingdutchman.com/↩ Department of Geography, https://www.geog.ucl.ac.uk/people/academic-staff/joanna-wilkin↩ "],
["course-information.html", "Course information Module structure Weekly topics Learning objectives Reading list Module assessment details Useful additional resources", " Course information Module structure This module consists of ten self-led workshops, ten interactive seminar discussions and ten help sessions. Each week, we’ll provide an online workshop, provided as a worksheet with videos and instructions to complete the practical component of the workshop. All online classes will be held on the Principles of Spatial Analysis ‘team’. In addition, each week will have its own reading list or additional ‘recommended’ (optional, not required!) online tutorials we know of that you might want to also complete. Weekly topics Week Date Topic 1 05/10/2020 Spatial analysis for data science 2 12/10/2020 Representation, scale and geography in spatial analysis 3 19/10/2020 Spatial properties, relationships and operations 4 26/10/2020 Spatial dependence, spatial autocorrelation and defining neighbours 5 02/11/2020 Exploratory Spatial Data Analysis and regression reading week reading week reading week 6 16/11/2020 Mapping clusters with point pattern analysis 7 23/11/2020 Geostatistics, interpolation and raster analysis 8 30/11/2020 DBScan and cluster analysis for urban applications 9 09/12/2020 To be confirmed 10 04/12/2020 Creating reproducible research and module recap Learning objectives By the end of the module, you should: have a good understanding of the principles underlying the analysis of spatial data in general and spatial statistics in particular; be able to use GIS software and tools for generating and visualising summary statistics; be able to examine, analyse and simulate a range of spatial patterns and processes; be able to use geostatistical tools to analyze and interpolate spatial patterns; appreciate the many different sources of uncertainty in spatial data and spatial processing and how to address such issues in analysis and research; be able to master the key concepts in network analysis with a focus on social and spatial networks (now in Intro to Data Science and Advanced Data Science modules); be able to explain several novel applications of spatial analysis techniques within geographic and social data science applications. Reading list We link to books and resources throughout each practical. The full reading list for the course is provided on the UCL library reading list page for the course. Alternatively, you can always easily find the link to the Reading List in the top right of any Moodle page for our module, under “Library Resources”. This Reading List will be updated on a weekly basis, in preparation for the week to come, so you may see some weeks without reading for now. But please check back at the start of each week as the lecture, seminar and/or workshop material is released for that week to check for new readings. All reading for that week will be provided by the time your learning materials are released - so you will not need to check the reading list for updates as the week progresses. Module assessment details The assessment for Principles of Spatial Analysis is set across two pieces of separate coursework, weighted at 50% each. The first piece of coursework will involve the completion of a spatial analysis project, based on the theory, concepts and application learnt during the module. A 1,500 word report will be submitted, alongside the code used within the project, which describes the analysis undertaken and the results of the analysis. Further guidance will be provided in Week 5 of the module. The second piece of coursework will be a written (1,500 word) review on a current data science application that uses spatial analysis as its core methodology. The application can be drawn from the lecture material, particularly during Weeks 8 and 9, or one of your own choice. Further guidance will be provided in Week 9 of the module. Guidance for both pieces will be uploaded to this section of the Moodle, once provided. Useful additional resources Besides the mandatory and recommended reading for this course, there are some additional resources that are worth checking out: MIT’s introduction course on mastering the command line: The Missing Semester of Your CS Education A useful tool to unpack command line instructions: explainshell.com Online resource to develop and check your regular expressions: regexr.com Selecting colour palettes for your map making and data visualisation: colorbrewer 2.0 "],
["spatial-analysis-for-data-science.html", "1 Spatial analysis for data science", " 1 Spatial analysis for data science The first week of PSA will introduce how geography and Geographical Information Science (GIScience) fits within the wider data science discipline and why there is a need to specialise in spatial and social analysis for data science. To provide this understanding, you will first work your way through a short document written specifically for this week to provide an extensive overview to why a geographical understanding to data science is critical to accurate and valid data analysis. Next, through a recorded lecture, you’ll be given a short introduction to Geographical Information Systems (GIS) tools for spatial data science and an explanation to how these tools have changed over the last decade, including a shift from traditional GIS software towards programming-based analysis in research applications. We’ll then show you examples of different types of GIS software through a recorded tutorial. To gain a practical basic understanding of the differences across these software, including their ease of use, the recorded tutorial will show you the steps and processing to create a simple choropleth map of population and population density in London. This week plays a formative role in providing everyone with baseline from which to not only pursue this module, but the other technical modules on the MSc. This week’s content is available on Moodle. "],
["geographical-representation.html", "2 Geographical representation", " 2 Geographical representation The first part of this week will look at spatial representation data models, i.e. how we transform geographic features and phenomena into geographic data for use within GIS. We will then explore the role of scale and geography within spatial analysis and provide you with a critical understanding of how both can impact and effect the analysis of data, particularly when looking at ‘event’ type data, i.e. the occurrence of a specific phenomenon over space. We will then introduce you to the role and usage of administrative geographies and discuss how they are subject to the Modifiable Area Unit Problem as well as its the consequences, including ecological fallacies. We will then discuss methods to account for these issues, including population standardization, as well as highlight alternative methods for representing data beyond traditional choropleth maps. The interactive lecture will also introduce the role of projections and what considerations you should make when choosing the projection for your analysis; projections are further discussed in Week 3 of CASA0005. The practical component of the week puts these issues into practice with an analysis of crime data from the UK and its various administrative geographies, as well as voting patterns in the USA. The practical component also introduces the two types of data joining primarily used in spatial analysis: attribute and spatial joins. This week’s content is available on Moodle. "],
["spatial-properties-and-relationships.html", "3 Spatial properties and relationships", " 3 Spatial properties and relationships Understanding spatial properties, relationships and how they are used within spatial operations are the building blocks to spatial data processing and analysis. This week, we look to provide you with a thorough introduction into using spatial operations (and the properties and relationships associated with them) through an introductory lecture, a research-based analysis (with demo and practical) and then a research task which we will look at during this week’s seminar. Within the lecture, we will highlight the different ways of conceptualizing key spatial properties, such as distance, and the impact this may have on measurement. We then focus on their application within spatial operations, and how they can be used for the selection, subset and validation of data. We then look at the core terminology used to define spatial relationships and how they can be used to process datasets, using the operations previously mentioned. The practical utilises these concepts to investigate the accessibility of greenspace for schools across London. Recent research (Bijnens et al, 2020) has shown that children brought up in proximity to greenspace have a higher IQ and fewer behavioral problems, irrespective of socio-economic background. Here we will look to understand whether there are geographical patterns to schools that have high versus low access of greenspace and where a lack of greenspace needs to be addressed. For the practical, we provide an introduction to the research problem and outline how we devise a research methodology to be able to investigate our research questions. We then look at the required processing steps to create the final dataset that can be used in our analysis. This is followed by a short demo in which Jo will demonstrate the analysis visually in QGIS. We then ask you to recreate the analysis by creating a script in R-Studio (code provided) - this will allow you to replicate the analysis for other cities within the U.K, or even further afield if you can extract the same data. Finally, in preparation for this week’s seminar, we ask you to watch a five minute video from a local news channel in Jo’s hometown - ready to discuss as a possible research task in Friday’s seminar. This week’s content is available on Moodle. "],
["spatial-autocorrelation.html", "4 Spatial autocorrelation 4.1 Neighbours 4.2 Quantifying difference over space", " 4 Spatial autocorrelation Spatial distribution of qualitative data taken from Rcolorbrewer website here. This week, we focus on the first of two key properties of spatial data: spatial dependence. Spatial dependence is the idea, as introduced in the first week via Tobler’s Law (1970), that the observed value of a variable in one location is often dependent (to some degree) on the observed value of the same value in a nearby location. For spatial analysis, this dependence can be assessed and measured statistically by considering the level of spatial autocorrelation between values of a specific variable, observed in either different locations or between pairs of variables observed at the same location. Spatial autocorrelation occurs when these values are not independent of one another and instead cluster together across geographic space. A critical first step of spatial autocorrelation is to define the criteria under which a spatial unit (e.g. an areal or point unit) can be understood as a “neighbor” to another unit. As highlighted in the previous week, spatial properties can often take on several meanings, and as a result, have an impact on the validity and accuracy of spatial analysis. This multiplicity also can be applied to the concept of spatial neighbours which can be defined through adjacency, contiguity or distance-based measures. As the specification of these criteria can impact the results, the definition followed therefore need to be grounded in particular theory that aims to represent the process and variable investigated. This week looks at spatial dependence and autocorrelation in detail, focusing on the different methods of assessment. As part of this, we look at the multiple methods to defining spatial neighbours and their suitability of use across different spatial phenomena – and how this approach is used to generate spatial weights for use within these spatial autocorrelation methods as well as their potential to generate spatially-explicit variables. We put these learnings into practice through an analysis of spatial dependence of our areal crime data from Week 2, experimenting with the deployment of different neighbours and the impact of their analyses. For this practical we will look at the distribution of thefts from persons in the borough of Camden, home of the main UCL Campus, and birthplace of Alfie Long (statue forthcoming). 4.1 Neighbours If we want to come up with quantifiable descriptions of variables and how they vary over space, then we need to find ways of quantifying the distance from point to point. When you attach values to the polygons of wards in London, and visualise them, different patterns appear, and the different shapes and sizes of the polygons effect what these patterns look like. There can appear to be clusters, or the distribution can be random. If you want to explain and discuss variables, the underlying causes, and the possible solutions to issues, it becomes useful to quantify how clustered, or at the opposite end, how random these distributions are. This issue is known as spatial autocorrelation. “Things are more like things that are closer to them.” - Tobler(ish) In raster data, variables are measured at regular spatial intervals (or interpolated to be represented as such). Each measurement is regularly spaced from its neighbours, like the pixels on the screen you are reading this from. With vector data, the distance of measurement to measurement, and the size and shape of the “pixel” of measurement becomes part of the captured information. Whilst this can allow for more nuanced representations of spatial phenomena, it also means that the quantity and type of distance between measurements needs to be acknowledged. Quantify the relationship of “neighbour” allows this to be done systematically. If you want to calculate the relative spatial relation of distributions, knowledge of what counts as a “neighbour” becomes useful. Neighbours can be neighbours due to euclidean distance (distance in space), or they can be due to shares relationships, like a shared boundary, or they can simply be the nearest neighbour, if there aren’t many other vectors around. Depending on the variable you are measuring the appropriateness of neighbourhood calculation techniques can change. 4.1.1 Setting up the environment To begin let’s load the libraries needed for this practical. # for spatial objects and operations library(sf) ## Linking to GEOS 3.7.2, GDAL 2.4.2, PROJ 5.2.0 # for finding nearest neighbours in sf objects library(nngeo) # for reading and quantifying data library(data.table) # for visualising spatial data library(tmap) Download the data and put it in a folder we can find. We will use the same structure as the data directory from the previous week. If you are using the same directory for this weeks work then you can put these files in the same directories. If not make new ones with names that work. Alternatively you can make your own structure and use that. To follow along with the code as it is and not edit the file paths there should be a folder called “raw/” in your project working directory, if not best to make one. Inside this create a folder called “crime”. You can download the crime data we will be working with from here and put it in the crime folder. Inside the “raw” directory there should be a directory called “administrative_boundaries”. In here make a folder called “camden_oas_2011/”. You can download the shape data we will be using from here. To check that you have all the files you need have a look at what’s in these directories. We can create variables that hold a text version of the filepath, you can edit these to contain the filepath of your own copy of the data. #make the filepath objects shapefile_dir_path &lt;- &quot;raw/administrative_boundaries/camden_oas_2011/&quot; crime_data_dir_path &lt;- &quot;raw/crime/&quot; #we can use list.files() with the direcotry names to find their contents #check for the files within these folders list.files(shapefile_dir_path) ## [1] &quot;OAs_camden_2011.dbf&quot; &quot;OAs_camden_2011.prj&quot; &quot;OAs_camden_2011.shp&quot; ## [4] &quot;OAs_camden_2011.shx&quot; list.files(crime_data_dir_path) ## [1] &quot;2019_camden_theft_from_person.csv&quot; #then we can assign the filenames to variables as well. shapefile_name &lt;- &quot;OAs_camden_2011.shp&quot; crimedata_filename &lt;- &quot;2019_camden_theft_from_person.csv&quot; #you can use paste0() to add these together as complete filepaths paste0(shapefile_dir_path, shapefile_name) ## [1] &quot;raw/administrative_boundaries/camden_oas_2011/OAs_camden_2011.shp&quot; paste0(crime_data_dir_path, crimedata_filename) ## [1] &quot;raw/crime/2019_camden_theft_from_person.csv&quot; Now we know the data is there we can load and plot the shape data. Plot the output areas of the borough Camden. # first read in the data camden_oas &lt;- st_read(paste0(shapefile_dir_path, shapefile_name), #the filename of the shapefile crs=27700 #the projection information of the shape #as we know it is in BNG ) ## Reading layer `OAs_camden_2011&#39; from data source `/Users/Tycho/Dropbox/UCL/Web/jtvandijk.github.io/GEOG0114/raw/administrative_boundaries/camden_oas_2011/OAs_camden_2011.shp&#39; using driver `ESRI Shapefile&#39; ## Simple feature collection with 749 features and 17 fields ## geometry type: MULTIPOLYGON ## dimension: XY ## bbox: xmin: 523954.5 ymin: 180965.4 xmax: 531554.9 ymax: 187603.6 ## CRS: EPSG:27700 # plot it to have a look plot(st_geometry(camden_oas)) You can see how one of these output areas could have many more neighbours than others, they vary a great deal in size and shape. The dimensions of these objects change over space, as a result the measurements within them must change too. Output areas are designed to convey and contain census information, so they are created in a way that maintains a similar number of residents in each one. The more sparsely populated an OA the larger it is. Output Areas are designed to cover the entirety of the land of England and Wales so they stretch over places where there are no people. In the north of Camden the largest Ouput Areas span over Hampstead Heath, a large park. Let’s explore how to find different kinds of neighbours using the example of one randomly selected output area. # we have randomly selected one OA &quot;E00004174&quot;, the OA containing the UCL main campus # and coincidentally also the birthplace of Alfie Long (statue forthcoming) # highlight it in a map using tmap tm_shape(camden_oas) + tm_borders(col=&quot;black&quot;) + tm_shape(camden_oas[camden_oas$OA11CD==&quot;E00004174&quot;,]) + tm_fill(col = &quot;red&quot;) 4.1.2 Euclidean neighbours The first way we are going to call something a neighbour is by using Euclidean distance. As our OA shapefile is projected in BNG (British National Grid), the coordinates are planar, going up 1 is the same distance as going sideways 1. Even better the coordinates are in metric measurements so it’s easy to make up heuristic distances. Let’s call every output area with a centroid 500m or less away from the centroid of our chosen OA a neighbour. # make a variable for our chosen output area so that we could change # it and all the other code could remain the same chosen_oa &lt;- &quot;E00004174&quot; # find only nearest neighbours to our chosen output area centroid, find all within 500 meters # select only the the centroid of our chosen output area and all other areas (with st_centroid) # we set the maximum number of neighbours we want to find to &quot;50&quot; (with parameter k) # we set the maximum distance of calling an OA centroid a neigbour to &quot;500&quot; (with parameter maxdist) # we return a sparse matrix that tells us whether each OA is a neighbour or not (with parameter sparse) chosen_oa_neighbours &lt;- st_nn(st_geometry(st_centroid(camden_oas[camden_oas$OA11CD==chosen_oa,])), st_geometry(st_centroid(camden_oas)), sparse = TRUE, k = 50, maxdist = 500) ## projected points # see the output class(chosen_oa_neighbours) ## [1] &quot;list&quot; # this is a list object that contains the row number of all the found numbers # you can access the pure vector of these numbers by using [[1]] notation # this can then be used to subset the OA output areas object # get the names (codes) of these neighbours neighbour_names &lt;- camden_oas[chosen_oa_neighbours[[1]],] neighbour_names &lt;- neighbour_names$OA11CD # plot the borough OA outlines in black with # the chosen oa filled in red and # the neighbours in green tm_shape(camden_oas) + tm_borders() + # highlight only the neighbours tm_shape(camden_oas[camden_oas$OA11CD %in% neighbour_names,]) + tm_fill(col = &quot;green&quot;) + # highlight only the chosen OA tm_shape(camden_oas[camden_oas$OA11CD==chosen_oa,]) + tm_fill(col = &quot;red&quot;) + tm_shape(camden_oas) + # overlay the borders tm_borders(col=&quot;black&quot;) 4.1.3 Shared boundary neighbours The next way of calculating neighbours takes into account the actual shape and location of the polygons in our shapefile. This has only recently been added to the world of sf(), previously we would have reverted to using the sp() package and others that depend on it such as spdep(). I’ve actually taken this bit of code from an issue raised in the Git repository of the sf package. You can look at it here. We create functions that check whether any polygons share boundaries or overlap one another, and then also check by how much. These new functions are based on the st_relate() function. The different cases of these are known as queen, and rook. These describe the relations in a similar way to the possible chess board movements of these pieces. Now that we’ve created the functions lets try them out. # let&#39;s use the same example oa as previously # you can check that it exists and if not assign the variable again if(exists(&quot;chosen_oa&quot;)==TRUE) { print(paste0(&quot;You have already selected &quot;,chosen_oa)) }else{ chosen_oa &lt;- &quot;E00004174&quot; print(&quot;You have not yet assigned the variable chosen_oa in this session. You have now been assigned E00004174, home of the main UCL campus and birthplace of Alfie Long (statue forthcoming).&quot;) } ## [1] &quot;You have already selected E00004174&quot; # the neighbourhood assigning works in a very similar way to the way st_nn() works # this way we will return a sparse list for the row numbers that are neighbours # and use that to subset the oa shapefile chosen_oa_neighbours &lt;- st_rook(st_geometry(camden_oas[camden_oas$OA11CD==chosen_oa,]), st_geometry(camden_oas)) # get the names of neighbours # get the names (codes) of these neighbours neighbour_names &lt;- camden_oas[chosen_oa_neighbours[[1]],] neighbour_names &lt;- neighbour_names$OA11CD # plot the borough OA outlines in black with # the chosen oa filled in red and # the neighbours in green tm_shape(camden_oas) + tm_borders() + # highlight only the neighbours tm_shape(camden_oas[camden_oas$OA11CD %in% neighbour_names,]) + tm_fill(col = &quot;green&quot;) + tm_shape(camden_oas[camden_oas$OA11CD==chosen_oa,]) + # highlight only the chosen OA tm_fill(col = &quot;red&quot;) + tm_shape(camden_oas) + # overlay the borders tm_borders(col=&quot;black&quot;) Because the tolerance of the shared boundaries in the st_rook pattern and the st_queen pattern in the example I have chosen they both assign the same neighbours. This is true for many non-square polygons as the difference is often given as whether two shapes share one or more points. Therefore the difference can have more to do with the resolution and alignment of your polygons than the actual spatial properties they represent. They can and do find different neighbours in other situations. Follow the grid example in the st_relate() documentation if you want to see it working. 4.2 Quantifying difference over space Now that we have found the different ways of finding neighbours we can consider how they relate to one another. There are two ways of looking at spatial autocorrelation: Local: This is the difference between an area and its neighbours. You would expect neighbours to be similar, but you can find exceptional places and results by seeing if places are quantifiably mor like or dislike their neighbours than the average other place. Global: This is a way of creating a metric of how regularly or irregularly clustered the variables are over the entire area studied. But before we start that let’s get into the data we are going to use! 4.2.1 Our property is theft. We’ll be using personal theft data from around camden. Our neighbourhood analysis of spatial autocorrelation should allow us to quantify the pattern of distribution of reported theft from persons in Camden in 2019. # read in the data camden_theft &lt;- fread(&quot;raw/crime/2019_camden_theft_from_person.csv&quot;) # this is a csv, and the coordinates are in columns called &quot;X&quot; and &quot;Y&quot; # you can convert this into an sf object quite easily camden_theft &lt;- st_as_sf(camden_theft, coords = c(&quot;X&quot;, &quot;Y&quot;), crs = 27700) # have a look at these points plot(camden_theft) This is point data, but we are interested in the polygons and how this data relates to the administrative boundaries it is within. Let’s count the number of thefts in each OA. This is a spatial operation that is often called “point in polygon”. As we are just counting the number of occurences in each polygon it is quite easy. In the future you may often want to aggregate over points for an area, or in reverse assign values from the polygon to the points. # this code counts the lengths (number) of points that intersect each polygon # let&#39;s add a new column to our OA sf object called n_thefts to store this camden_oas$n_thefts &lt;- lengths(st_intersects(camden_oas, camden_theft)) # plot a quick map of it tm_shape(camden_oas) + tm_fill(col=&quot;n_thefts&quot;) # you can see our map is massively skewed by central london # meaning that the results in central london (the south of camden) # are so much larger than those in the north that it makes it harder # to see the smaller differences between other areas # try taking the square root of the number of thefts # (there are 0s in data so log would return some negatives) camden_oas$sqrt_n_thefts &lt;- sqrt(camden_oas$n_thefts) # plot a quick map of it tm_shape(camden_oas) + tm_fill(col=&quot;sqrt_n_thefts&quot;) # there: a much more nuanced picture 4.2.2 Global Moran’s I With a global Moran’s I we can test how “random” the spatial distribution of these values is. Global Moran’s I is a metric between -1 and 1. -1 is a completely even spatial distribution of values, 0 is a “random” distribution, and 1 is a “non-random” distribution of clearly defined clusters. To calculate the global Moran’s I you need an adjacency matrix that contains the information of whether or not an OA is next to another, for an even more nuanced view you can include distance, or a distance weighting in the matrix rather than just the TRUE or FALSE, to take into account the strength of the nieghbourhoodness. I will revisit the neighbourhood calculation used earlier then develop it from a one to all to an all to all computation. # here is the previous way of calculating neighbourhoodness for our chosen OA # but now we will add an extra argument that states we want a non-sparse adjacency matrix returned # find only nearest neighbours to our chosen output area centroid, find all within 500 meters # select only the the centroid of our chosen output area and all other areas (with st_centroid) # we set the maximum number of neighbours we want to find to &quot;50&quot; (with parameter k) # we set the maximum distance of calling an OA centroid a neigbour to &quot;500&quot; (with parameter maxdist) # we return a non-sparse matrix that tells us whether each OA is a neighbour or not (with parameter sparse) chosen_oa_neighbours &lt;- st_nn(st_geometry(st_centroid(camden_oas[camden_oas$OA11CD==chosen_oa,])), st_geometry(st_centroid(camden_oas)), sparse = FALSE, k=50, maxdist = 500) ## projected points # check the object type class(chosen_oa_neighbours) ## [1] &quot;matrix&quot; # this single row matrix contains a true or false for each OA in the OA sf object indicating whether it is true or false # if you sum() it it counts the number of TRUEs in it sum(chosen_oa_neighbours) ## [1] 21 Because of the way Moran’s I functions in R it is necessary to use sp() and spdep(). So load them in. # for doing spatial operations (now mostly superseded by sf) library(sp) # for our neighbourhood and Moran&#39;s I analysis library(spdep) ## Loading required package: spData ## To access larger datasets in this package, install the spDataLarge ## package with: `install.packages(&#39;spDataLarge&#39;, ## repos=&#39;https://nowosad.github.io/drat/&#39;, type=&#39;source&#39;)` As you will see these methods and functions have quite esoteric and complicated syntax. Some of the operations they will do will be similar to the examples shown earlier, but the way they assign and store variables makes it much quicker to run complex spatial operations. # check the current class class(camden_oas) ## [1] &quot;sf&quot; &quot;data.frame&quot; # convert it to sp camden_oas_sp &lt;- as_Spatial(camden_oas, IDs=camden_oas$OA11CD) # check the class of the new object class(camden_oas_sp) ## [1] &quot;SpatialPolygonsDataFrame&quot; ## attr(,&quot;package&quot;) ## [1] &quot;sp&quot; Now we can make the esoteric and timesaving “nb” object! # make the nb camden_oas_nb &lt;- poly2nb(camden_oas_sp, row.names=camden_oas_sp$OA11CD) # what kind of object is it? class(camden_oas_nb) ## [1] &quot;nb&quot; # have a look inside str(camden_oas_nb,list.len=10) ## List of 749 ## $ : int [1:7] 10 15 215 303 327 375 464 ## $ : int [1:5] 19 72 309 365 430 ## $ : int [1:3] 133 152 709 ## $ : int [1:7] 78 131 152 286 314 582 651 ## $ : int [1:5] 67 316 486 492 703 ## $ : int [1:8] 7 68 317 487 556 612 625 638 ## $ : int [1:3] 6 68 317 ## $ : int [1:7] 57 58 164 358 429 605 684 ## $ : int [1:5] 58 164 489 609 700 ## $ : int [1:7] 1 215 245 311 327 366 644 ## [list output truncated] ## - attr(*, &quot;class&quot;)= chr &quot;nb&quot; ## - attr(*, &quot;region.id&quot;)= Factor w/ 749 levels &quot;E00004120&quot;,&quot;E00004121&quot;,..: 268 187 447 448 531 533 534 56 522 263 ... ## - attr(*, &quot;call&quot;)= language poly2nb(pl = camden_oas_sp, row.names = camden_oas_sp$OA11CD) ## - attr(*, &quot;type&quot;)= chr &quot;queen&quot; ## - attr(*, &quot;sym&quot;)= logi TRUE It’s basically the same as the sparse list of neighbours that we created before using st_nn() and st_rook(). Now, however it will work with the spdep() ecosystem of functions. If you look at the output you can see that it automatically uses “queen” case. # further into the sp rabbit hole we can now create a matrix from this (like the non-sparse output of the st_nn/st_rook processes) camden_oas_nb_mat &lt;- nb2mat(camden_oas_nb, style=&#39;B&#39;) # check the sum of one columnd sum(camden_oas_nb_mat[1,]) ## [1] 7 # where nb2mat() extends this is in allowing weighting camden_oas_nb_mat &lt;- nb2mat(camden_oas_nb, style=&#39;W&#39;) # check the sum of one column sum(camden_oas_nb_mat[1,]) ## [1] 1 Now the sum of one row instead of being the total number of neighbours for that OA instead adds up to 1. This is important for the calculation of Moran’s I, as the metric is designed to return a values between -1 and 1. If the neghbour relations are not limited to add up to one the value for Moran’s I can exceed -1 and 1, and it loses meaning when compared against other cases. Now we need to calculate a separate weights list object to use for the Moran’s I calculation. # create the list weights object nb_weights_list &lt;- nb2listw(camden_oas_nb, style=&#39;B&#39;) # have a look at the class class(nb_weights_list) ## [1] &quot;listw&quot; &quot;nb&quot; # so it&#39;s nb AND weights # now use that to create a quick Moran&#39;s I moran(camden_oas_sp$n_thefts, nb_weights_list, n=length(nb_weights_list$neighbours), S0=Szero(nb_weights_list)) ## $I ## [1] 0.5543285 ## ## $K ## [1] 75.21583 On the scale of -1 to 1 where does it sit? This is just a quick way to check the score. To do so properly you need to check between a randomly distributed version of the variables, and the variables as they are. To do so you need to use the MonteCarlo method where you actually carry this out. You can specify how many times it does this to increase precision. # run it 599 times mc_model &lt;- moran.mc(camden_oas_sp$n_thefts, nb_weights_list, nsim=599) # what do we get? mc_model ## ## Monte-Carlo simulation of Moran I ## ## data: camden_oas_sp$n_thefts ## weights: nb_weights_list ## number of simulations + 1: 600 ## ## statistic = 0.55433, observed rank = 600, p-value = 0.001667 ## alternative hypothesis: greater This model shows that our distribution of thefts differs significantly from a random distribution. 4.2.3 Local Moran’s I With a measurement of local spatial autocorrelation we could find hotspots of theft that are surrounded by areas of much lower theft. According to the previous global statistic these are not randomly distributed pockets but would be outliers against the general trend of clusteredness! These could be areas that contain very specific locations, where interventions could be made that drastically reduce the rate of crime rather than other areas where there is a high level of ambient crime. # you need the nb object and the nb and weights list # make the nb camden_oas_nb &lt;- poly2nb(camden_oas_sp, row.names=camden_oas_sp$OA11CD) # create the list weights object # but importantly with the row stadardisation this time nb_weights_list &lt;- nb2listw(camden_oas_nb, style=&#39;W&#39;) # use the localmoran() function local_moran_camden_oa_theft &lt;- localmoran(camden_oas_sp$n_thefts, nb_weights_list) To properly utilise these local statistics and make in intuitively useful map we need to combine them with our crime count variable. Because of the way the new variable will be calculated we need to rescale our variable so that the mean is 0. this means that the lowest values will be -ve and the highest +ve. The distribution and the relationship between the will be preserved though. # rescale that variable! camden_oas_sp$scale_n_thefts &lt;- scale(camden_oas_sp$n_thefts) To compare against its neighbours we need to create a new column that carries information about the neighbours. This is called a spatial lag function! What fun! The “lag” just refers to the fact you are comparing one observation against another, this can be used between timed observations. In this case, the “lag” we are looking at is between neighbours. # create a spatial lag variable and save it to a new column camden_oas_sp$lag_scale_n_thefts &lt;- lag.listw(nb_weights_list, camden_oas_sp$scale_n_thefts) Now we have used sp for all it is worth it’s time to head back to the safety of sf! # convert to sf camden_oas_moran_stats &lt;- st_as_sf(camden_oas_sp) To make a human readable version of the map we will generate some labels for our findings from the Local Moran’s I stats. This process calculates what the value of each polygon is compared to its neighbours and works out if they are similar or dissimilar and in which way, then gives them a text label to describe the relationship. I the text label, the first term describes the area being focused on and the second represents that areas neighbours. # run all of these through to assign variables # for the statistical significance version assign a level # of statistical significance for the p value, column 5 of the local moran model sig_level &lt;- 0.1 # version with significance value camden_oas_moran_stats$quad_sig &lt;- ifelse(camden_oas_moran_stats$scale_n_thefts &gt; 0 &amp; camden_oas_moran_stats$lag_scale_n_thefts &gt; 0 &amp; local_moran_camden_oa_theft[,5] &lt;= sig_level, &quot;high-high&quot;, ifelse(camden_oas_moran_stats$scale_n_thefts &lt;= 0 &amp; camden_oas_moran_stats$lag_scale_n_thefts &lt;= 0 &amp; local_moran_camden_oa_theft[,5] &lt;= sig_level, &quot;low-low&quot;, ifelse(camden_oas_moran_stats$scale_n_thefts &gt; 0 &amp; camden_oas_moran_stats$lag_scale_n_thefts &lt;= 0 &amp; local_moran_camden_oa_theft[,5] &lt;= sig_level, &quot;high-low&quot;, ifelse(camden_oas_moran_stats$scale_n_thefts &lt;= 0 &amp; camden_oas_moran_stats$lag_scale_n_thefts &gt; 0 &amp; local_moran_camden_oa_theft[,5] &lt;= sig_level, &quot;low-high&quot;, ifelse(local_moran_camden_oa_theft[,5] &gt; sig_level, &quot;not-significant&quot;, &quot;not-significant&quot;))))) # version without significance check camden_oas_moran_stats$quad_non_sig &lt;- ifelse(camden_oas_moran_stats$scale_n_thefts &gt; 0 &amp; camden_oas_moran_stats$lag_scale_n_thefts &gt; 0, &quot;high-high&quot;, ifelse(camden_oas_moran_stats$scale_n_thefts &lt;= 0 &amp; camden_oas_moran_stats$lag_scale_n_thefts &lt;= 0, &quot;low-low&quot;, ifelse(camden_oas_moran_stats$scale_n_thefts &gt; 0 &amp; camden_oas_moran_stats$lag_scale_n_thefts &lt;= 0, &quot;high-low&quot;, ifelse(camden_oas_moran_stats$scale_n_thefts &lt;= 0 &amp; camden_oas_moran_stats$lag_scale_n_thefts &gt; 0, &quot;low-high&quot;,NA)))) Now that the horrible looking conditional is finished we can see what we did. To understand how this is working we can look at the data non-spatially. As we recentred the data, our axes should split the data neatly into their different area vs spatial lag relationship categories. To do this plot we will need to use the plotting package ggplot2. library(ggplot2) Let’s make the scatterplot using the scaled number of thefts for the areas in the x axis and their spatially lagged results in the y axis. #Plot the results without the satistical significance ggplot(camden_oas_moran_stats, aes(x = scale_n_thefts, y = lag_scale_n_thefts, color = quad_non_sig)) + geom_vline(xintercept = 0) + # plot vertical line geom_hline(yintercept = 0) + # plot horizontal line xlab(&quot;Scaled Thefts (n)&quot;) + ylab(&quot;Lagged Scaled Thefts (n)&quot;) + labs(colour=&quot;Relative to neighbours&quot;) + geom_point() #Plot the results nnw with the satistical significance ggplot(camden_oas_moran_stats, aes(x = scale_n_thefts, y = lag_scale_n_thefts, color = quad_sig)) + geom_vline(xintercept = 0) + # plot vertical line geom_hline(yintercept = 0) + # plot horizontal line xlab(&quot;Scaled Thefts (n)&quot;) + ylab(&quot;Lagged Scaled Thefts (n)&quot;) + labs(colour=&quot;Relative to neighbours&quot;) + geom_point() Now let’s see how they are arranged spatially. # map all of the results here tm_shape(camden_oas_moran_stats) + tm_fill(col = &quot;quad_non_sig&quot;) # map only the statistically significant results here tm_shape(camden_oas_moran_stats) + tm_fill(col = &quot;quad_sig&quot;) As our data are so spatially clustered we can’t see any outlier places (once we have ignored the non-significant results. This suggests that the pattern of theft from persons is not highly concentrated in very small areas or particular Output Areas, and instead is spread on a larger scale than we have used here. To go further than we have today it would be possibe to run the exact same code but using a larger scale, perhaps LSOA, or Ward, and compare how this changes the Moran’s I statistics globally and locally. Or, to gain statistical significance in looking at the difference between areas getting more data perhaps over a longer timescale, where there are less areas with 0 thefts. "],
["exploratory-data-analysis.html", "5 Exploratory data analysis 5.1 Feedback", " 5 Exploratory data analysis This week, we focus on the second of the two key properties of spatial data: spatial heterogeneity. With the underlying process (or processes) that govern a spatial variable likely to vary across space, a single global relationship for an entire region of study may not adequately model the process that governs outcomes in any given location of the study region. As a result, multiple methods have been developed to incorporate ‘space’ into traditional regression models, including spatial lag models, spatial error models, and Geographical Weighted Regression. This week provides the building blocks to conducting a statistical and spatial investigation into the relationships between spatial variables, first looking at the concept of Exploratory Spatial Data Analysis (ESDA) and how to understand data distributions, descriptive statistics, transformations as well as check for outliers and trends. We then look at the three types of spatial regression models in turn to understand their methodology and potential advantages and limitations in accounting for space when modelling relationships. In this week’s session we will explore potential factors that may contribute to our crime rate in London, using previous literature to identify variables for inclusion in our analysis. We conduct an ESDA of these variables, followed by statistical and spatial regression analysis to determine whether our variables adhere to previous literature and do contribute to crime in our area of study. This week’s content will be made available on 02/11. 5.1 Feedback Please take a moment to give us some feedback on this week’s content. "],
["point-pattern-analysis.html", "6 Point pattern analysis 6.1 Feedback", " 6 Point pattern analysis In our previous practicals, we have aggregated our event data into areal units, primarily using administrative geographies, to enable its easy comparison with other datasets provided at the same spatial scale, such as the census data used in the previous week, as well as to conduct spatial autocorrelation tests. However, when locations are precisely known, spatial point data can be used with a variety of spatial analytic techniques that go beyond the methods typically applied to areal data. The set of methods unique to point data are often referred to as point pattern analysis and geostatistics. This week, we focus on point pattern analysis, whilst next week we will look at geostatistics. Within point pattern analysis, we look to detect patterns across a set of locations, including measuring density, dispersion and homogeneity in our point structures. We will look first at basic forms of point pattern analysis, including mean centers and the standard deviational ellipse, and then more powerful analysis methods, including kernel density estimation and Ripley’s K function. These latter functions help determine and/or show whether points have a random, dispersed or clustered distribution pattern at a certain scale. To put these measures and methods into action, our practical component looks to test the hypothesis that “the majority of bicycle theft in London occurs with walking distance of a train or tube station”, by assessing clusters and hotspots of bike theft in relation to a transportation locations. This week’s content will be made available on 16/10. 6.1 Feedback Please take a moment to give us some feedback on this week’s content. "],
["geostatistics.html", "7 Geostatistics 7.1 Feedback", " 7 Geostatistics Following on from Week 3 and in conjunction with this week in your CASA005 module, we will also be focusing on rasters, exploring further the creation and application of rasters from vector datasets using geostatistics. During the lecture, we will provide a more in-depth and detailed explanation behind the geostatistics methods of interpolation, looking at various deterministic and geostatistical techniques. We then introduce methods to using vector datasets with rasters, utilizing a GIS method known as zonal statistics. Following on from Week 3’s practical, we look to study further the role of greenspace quality in relation to schools and how this varies across different geographies. This week, we look at greenspace quality from a personal health perspective, analyzing air quality across our greenspaces. By analyzing the air quality of greenspace, we can provide a more detailed understanding to how “accessible” the greenspaces are to the surrounding schools. This week’s content will be made available on 23/11. 7.1 Feedback Please take a moment to give us some feedback on this week’s content. "],
["cluster-analysis.html", "8 Cluster analysis 8.1 Feedback", " 8 Cluster analysis DBScan is a density-based clustering algorithm that is commonly used in data mining and machine learning. Across a set of points, DBSCAN will group together points that are close to each other based on a distance measurement and a minimum number of points. It also marks as outliers the points that are in low-density regions. The algorithm can be used to find associations and structures in data that are hard to find through visual observation alone, but that can be relevant and useful to find patterns and predict trends. Whilst the algorithm is nearly 25 years old, it still is incredibly relevant to many applications within data science today, including within spatial analysis. Novel use of the algorithm has seen researchers detect and delineate urban areas from building footprint data. This use presents significant opportunities for those working to provide spatial data within countries where until recently, significant reference data did not exist. To understand this potential application, we look at the issues of data scarcity and sparsity within LICs and MICs, which do not currently have extensive mapping data or national mapping agencies to provide this data. We look at current initiatives to address this data dearth, with a specific focus on those working on the automated extraction of building footprints from satellite imagery using machine learning. Within the practical component, we look to deploy a simple version of DBScan on building data subset from the Tanzanian building dataset created by Microsoft. We attempt to detect and delineate our own urban areas within the dataset and discuss the advantages of novel changes made by those working with the algorithm for this specific purpose. This week’s content will be made available on 30/10. 8.1 Feedback Please take a moment to give us some feedback on this week’s content. "],
["bayesian-modelling.html", "9 Bayesian modelling", " 9 Bayesian modelling Bayesian methodology is an approach to statistical inference that has existed for a long time. However, its applications have been limited until recent advancements in computation and simulation methods has made its deployment and use within big datasets viable. The concept underlying Bayesian spatial modeling is Bayes’ theorem, which considers both the distributions of the data and the unknown coefficient estimates (LeSage and Pace, 2009). Bayesian spatial modeling embraces most, if not all, spatial models in the literature, such as the spatial lag model, the spatial error model, and geographically weighted regression discussed in Week 5. As a result, recent decades have experienced a rapid growth in the application of Bayesian spatial modeling to epidemiology, demography, and environmental health research, in addition to other geography-related disciplines. Bayesian modelling has been used to estimate population distributions, disease spread and air pollution. This week provides you with a general introduction to Bayesian modelling for geographical applications, with a focus on understanding the overall methodology as well as selection of variables for use within the model. The practical component looks at R-INLA package and how it can be used within health modelling. This week’s content will be made available on Moodle on 09/12. "],
["reproducible-research.html", "10 Reproducible research", " 10 Reproducible research In our final week of PSA, we will recap the main principles of spatial analysis that you have learnt over the last nine weeks. We will then look to tidy one of our projects from the previous week to use it within CodeOcean, an online platform that hosts code and data to create “reproducible runs” and “capsules” of research projects. The platform (alongside others!) enables you to create an anonymized version of your project, ready for its submission to journals as part of their increasing requirement to pass reproducibility and openness tests, e.g. the International Journal of Geographic Information Science. The live session of this week will be extended to present the two pieces of coursework you will assessed on as part of this module, as well as to answer any questions you may have on these assessments. This week’s content will be made available on Moodle on 09/12. "]
]
